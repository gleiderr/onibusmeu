{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Horario","props","partidas","map","partida","index","react_default","a","createElement","className","key","título","Linha","quadros","horário","número","nome","tarifa","município","empresa","Linhas","linhas","linha","HomePage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","state","e","setState","filter","toLowerCase","value","target","includes","role","aria-label","type","placeholder","onChange","href","rel","style","textDecoration","React","Component","fetch","then","resp","json","ReactDOM","render","src_HomePage","document","getElementById","console","log","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2cdb0b03.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction Horario(props) {\n  const partidas = props.partidas.map((partida, index) => {\n      return (\n        <span className='border rounded m-1' key={index}>\n          {partida}\n        </span>\n      );\n    });\n\n  return (\n    <div>\n      <h6>{props.título}</h6>\n      <div className='d-flex flex-wrap'>{partidas}</div>\n    </div>\n   );\n}\n\nfunction Linha(props) {\n  const quadros = props.quadros.map((horário) => {\n    return (<Horario key={horário.título} \n                     título={horário.título}\n                     partidas={horário.partidas} />);\n  });\n\n  return (\n    <div className='card card-body my-2'>\n      <h5 className='card-title mb-0'>{props.número} - {props.nome}</h5>\n      <div className='card-text'>\n        <div><strong>Tarifa:</strong> {props.tarifa}</div>\n        <div><strong>Município:</strong> {props.município}</div>\n        <div><strong>Empresa:</strong> {props.empresa}</div>\n        {quadros}\n      </div>\n    </div>\n   );\n}\n\nfunction Linhas(props) {\n  const linhas = props.linhas.map((linha) => {\n    return (<Linha key={linha.número}\n                   número={linha.número}\n                   nome={linha.nome}\n                   município={linha.município}\n                   tarifa={linha.tarifa}\n                   empresa={linha.empresa}\n                   quadros={linha.quadros} />);\n  })\n\n  return (<div>{linhas}</div>);\n}\n\nclass HomePage extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { linhas: props.linhas, };\n  }\n\n  handleChange(e) {\n    this.setState({\n      linhas: this.props.linhas.filter(linha => {\n        let nome = linha.nome.toLowerCase();\n        let value = e.target.value.toLowerCase();\n        \n        return nome.includes(value);\n      }),\n    });\n  }\n\n  render() {\n    return (\n      <div className='h-100'>\n        <header>\n          <nav className='navbar navbar-dark bg-primary'>\n            <div className='navbar-brand'>\n                <span role='img' aria-label='Ô'>🚍</span>\n                nibus Meu\n            </div>\n            <form className='form-inline col-6 col-sm-auto p-0'>\n              <input className='form-control data-hj-whitelist' \n                     type='search' \n                     placeholder='Sua linha 🔎'\n                     onChange={this.handleChange}\n                     />\n            </form>\n          </nav>\n        </header>\n        <main className='container my-2'>\n          <Linhas linhas={this.state.linhas} />\n        </main>\n        <footer className='bg-primary' >\n          <div className='container text-light text-center'>\n          {'Desenvolvido por '}\n          <a className='text-light' \n             href='https://gleiderr.github.io' \n             rel='noopener noreferrer' \n             target='_blank' \n             style={{'textDecoration': 'underline'}}>\n            Gleider Costa\n          </a>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nconst linhas = [\n  {\n    nome: '5800 - Caieiras',\n    partidaPadrão: 'Terminal Morro Alto',\n    quadros: [\n      {\n        título: 'Dia Útil',\n        partidas: [\n          '00:30',\n          '01:50',\n          '03:10',\n          '04:00',\n          '04:30',\n          '04:40',\n          '04:50',\n          '05:00',\n          '05:10',\n          '05:30', \n          '05:45', \n          '06:00', \n          '06:20',\n          '06:35', '06:50', '07:35', '07:55',\n          '08:15', '08:45', '09:15', '09:45',\n          '10:15', '10:45', '11:15', '11:45',\n          '12:25', '12:45', '13:10', \n          '13:25',\n          '13:45',\n          '14:05',\n          '14:25',\n          '14:45',\n          '15:05',\n          '15:20',\n          '15:35',\n          '15:50',\n          '16:10',\n          '16:20',\n          '16:30',\n          '16:50',\n          '17:00',\n          '17:20',\n          '17:35',\n          '17:50',\n          '18:05',\n          '18:20',\n          '18:35', \n          '18:50',\n          '19:10',\n          '19:30',\n          '19:50',\n          '20:10',\n          '20:30',\n          '20:50', \n          '21:25',\n          '22:00',\n          '22:35',\n          '23:10', \n          '23:45', \n        ],\n      },\n    ]\n  },\n];\n\nfetch('./der.json')\n  .then(resp => resp.json())\n  .then(linhas => {\n    ReactDOM.render(<HomePage linhas={linhas}/>, document.getElementById('root'));\n    console.log(linhas);\n    \n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n  });//*/\n\n\n"],"sourceRoot":""}