{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Horario","props","partidas","map","partida","index","react_default","a","createElement","className","key","título","DescricaoLinha","quadros","horário","tarifa","município","empresa","Linha","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","state","expanded","setState","descricaoLinha","pre_char","onClick","número","nome","React","Component","Linhas","linhas","linha","src_Linha","HomePage","_this2","handleChange","e","_this3","value","target","toLowerCase","clearTimeout","timeoutID","setTimeout","filter","includes","role","aria-label","type","placeholder","onChange","href","rel","style","textDecoration","fetch","then","resp","json","ReactDOM","render","src_HomePage","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec503446.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction Horario(props) {\n  const partidas = props.partidas.map((partida, index) => {\n      return (\n        <span className='border rounded m-1' key={index}>\n          {partida}\n        </span>\n      );\n    });\n\n  return (\n    <div>\n      <h6>{props.título}</h6>\n      <div className='d-flex flex-wrap'>{partidas}</div>\n    </div>\n   );\n}\n\nfunction DescricaoLinha(props) {\n  const quadros = props.quadros.map((horário) => {\n    return (<Horario key={horário.título} \n                     título={horário.título}\n                     partidas={horário.partidas} />);\n  });\n\n  return (\n    <div className='card-text'>\n      <div><strong>Tarifa:</strong> {props.tarifa}</div>\n      <div><strong>Município:</strong> {props.município}</div>\n      <div><strong>Empresa:</strong> {props.empresa}</div>\n      {quadros}\n    </div>\n  );\n}\n\nclass Linha extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = { expanded: false };\n  }\n\n  handleClick() {\n    this.setState({expanded: !this.state.expanded });\n  }\n    \n  render() {\n    let descricaoLinha;\n    if (this.state.expanded) {\n      descricaoLinha = (<DescricaoLinha tarifa={this.props.tarifa} \n                          município={this.props.município} \n                          empresa={this.props.empresa}\n                          quadros={this.props.quadros} />);\n    }\n\n    let pre_char = this.state.expanded ? '🔼' : '🔽';\n\n    return (\n      <div className='card card-body my-2'>\n        <h6 className='card-title mb-0' onClick={this.handleClick}>{pre_char} {this.props.número} - {this.props.nome}</h6>\n        {descricaoLinha}\n      </div>\n     );\n  }\n\n}\n\nfunction Linhas(props) {\n  const linhas = props.linhas.map((linha) => {\n    return (<Linha key={linha.número}\n                   número={linha.número}\n                   nome={linha.nome}\n                   município={linha.município}\n                   tarifa={linha.tarifa}\n                   empresa={linha.empresa}\n                   quadros={linha.quadros} />);\n  })\n\n  return (<div>{linhas}</div>);\n}\n\nclass HomePage extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { linhas: props.linhas, };\n  }\n\n  handleChange(e) {\n    let value = e.target.value.toLowerCase();\n\n    clearTimeout(this.timeoutID);\n\n    this.timeoutID = setTimeout(() => {\n      let linhas;\n      if (value) {\n        linhas = this.props.linhas.filter(linha => {\n          let nome = linha.número + ' ' + linha.nome.toLowerCase();\n          \n          return nome.includes(value);\n        });\n      } else {\n        linhas = this.props.linhas;\n      }\n\n      this.setState({linhas});\n    }, 300);\n  }\n\n  render() {\n    return (\n      <div className='h-100'>\n        <header>\n          <nav className='navbar navbar-dark bg-primary'>\n            <div className='navbar-brand'>\n                <span role='img' aria-label='Ô'>🚍</span>\n                nibus Meu\n            </div>\n            <div className='col-6 col-sm-auto p-0'>\n              <input className='form-control data-hj-whitelist' \n                     type='search' \n                     placeholder='Sua Linha 🔎'\n                     onChange={this.handleChange}\n                     />\n            </div>\n          </nav>\n        </header>\n        <main className='container my-2'>\n          <Linhas linhas={this.state.linhas} />\n        </main>\n        <footer className='bg-primary' >\n          <div className='container text-light text-center'>\n          {'Desenvolvido por '}\n          <a className='text-light' \n             href='https://gleiderr.github.io' \n             rel='noopener noreferrer' \n             target='_blank' \n             style={{'textDecoration': 'underline'}}>\n            Gleider Costa\n          </a>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nfetch('./der.json')\n  .then(resp => resp.json())\n  .then(linhas => {\n    ReactDOM.render(<HomePage linhas={linhas}/>, document.getElementById('root'));\n    \n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n  });//*/\n\n\n"],"sourceRoot":""}